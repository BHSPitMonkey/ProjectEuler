# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

defmodule Euler do
  # Launching point (for convenience)
  def fib_sum(limit) when limit >= 2 do
    fib_sum(1, 2, limit, 2)
  end

  # Base case (limit exceeded)
  def fib_sum(a, b, limit, acc) when a + b >= limit do
    acc
  end

  # Recursive case
  def fib_sum(a, b, limit, acc) do
    c = a + b
    inc = fn
      x when rem(x, 2) == 0 -> x
      _x -> 0
    end
    fib_sum(b, c, limit, acc + inc.(c))
  end
end

IO.puts Euler.fib_sum(4_000_000)
